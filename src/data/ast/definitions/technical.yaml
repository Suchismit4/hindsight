# Technical Analysis Formula Definitions
#
# This file defines common technical analysis formulas using the AST grammar.
# Each formula is defined with its variables, functions, and validation rules.

rsi:
  description: "Relative Strength Index - measures momentum"
  expression: "100 - (100 / (1 + (rma(gain($price, 1), $window) / rma(loss($price, 1), $window))))"
  return_type: "dataarray"
  variables:
    price:
      type: "dataarray"
      description: "Price data (typically close price)"
    window:
      type: "number"
      description: "Period for RSI calculation"
      default: 14
      validation:
        min: 1
        max: 100
  functions:
    rma:
      description: "Relative Moving Average"
      args:
        - name: "data"
          type: "dataarray"
          description: "Input data"
        - name: "window" 
          type: "number"
          description: "Window size"
    gain:
      description: "Positive price changes"
      args:
        - name: "data"
          type: "dataarray" 
          description: "Input data"
        - name: "periods"
          type: "number"
          description: "Number of periods"
    loss:
      description: "Negative price changes"
      args:
        - name: "data"
          type: "dataarray"
          description: "Input data"
        - name: "periods"
          type: "number"
          description: "Number of periods"
  notes: "RSI values range from 0 to 100. Values above 70 indicate overbought conditions, below 30 indicate oversold conditions."

wma:
  description: "Weighted Moving Average - assigns higher weights to more recent values"
  expression: "wma($price, $window, $weights)"
  return_type: "dataarray"
  variables:
    price:
      type: "dataarray"
      description: "Price data (typically close price)"
    window:
      type: "number"
      description: "Period for WMA calculation"
      default: 20
      validation:
        min: 1
        max: 200
    weights:
      type: "array"
      description: "Optional weight array. If not provided, uses linearly increasing weights [1,2,...,window]"
      default: null
  functions:
    wma:
      description: "Weighted Moving Average calculation"
      args:
        - name: "data"
          type: "dataarray"
          description: "Input data"
        - name: "window"
          type: "number"
          description: "Window size"
        - name: "weights"
          type: "array"
          description: "Array of weights (optional)"
  notes: "WMA gives more weight to recent values. Default weights are linearly increasing. Custom weights will be normalized to sum to 1."

alma:
  description: "Arnaud Legoux Moving Average - adaptive weighted moving average using Gaussian weights"
  expression: "wma($price, $window, $weights)"
  return_type: "dataarray"
  modules:
    alma_generator:
      module_path: "src.data.generators.weights"
      function_name: "alma_weights"
      description: "Generate ALMA weights using Gaussian distribution"
      cache_result: true
  variables:
    price:
      type: "dataarray"
      description: "Price data (typically close price)"
    window:
      type: "number"
      description: "Period for ALMA calculation"
      default: 10
      validation:
        min: 1
        max: 200
    offset:
      type: "number"
      description: "Phase offset (0 to 1). 0.85 focuses on recent values, 0.1 on older values"
      default: 0.85
      validation:
        min: 0.0
        max: 1.0
    sigma:
      type: "number"
      description: "Smoothing parameter. Higher values make weights more uniform"
      default: 6
      validation:
        min: 1
        max: 20
    weights:
      type: "array"
      description: "ALMA weights generated using Gaussian distribution"
      generator: "alma_generator"
  functions:
    wma:
      description: "Weighted Moving Average calculation"
      args:
        - name: "data"
          type: "dataarray"
          description: "Input data"
        - name: "window"
          type: "number"
          description: "Window size"
        - name: "weights"
          type: "array"
          description: "Array of weights"
  notes: "ALMA provides a good balance between responsiveness and smoothness using Gaussian-distributed weights."

dema:
  description: "Double Exponential Moving Average - reduces lag of traditional EMA"
  expression: "2 * ema($price, $window) - ema(ema($price, $window), $window)"
  return_type: "dataarray"
  variables:
    price:
      type: "dataarray"
      description: "Price data (typically close price)"
    window:
      type: "number"
      description: "Period for DEMA calculation"
      default: 21
      validation:
        min: 1
        max: 200
  functions:
    ema:
      description: "Exponential Moving Average"
      args:
        - name: "data"
          type: "dataarray"
          description: "Input data"
        - name: "window"
          type: "number"
          description: "Window size"
  notes: "DEMA applies exponential smoothing twice to reduce lag while maintaining smoothness. The formula is: 2*EMA(data) - EMA(EMA(data))."

fwma:
  description: "Fibonacci Weighted Moving Average - uses Fibonacci sequence for weights"
  expression: "wma($price, $window, $weights)"
  return_type: "dataarray"
  modules:
    fibonacci_generator:
      module_path: "src.data.generators.weights"
      function_name: "fibonacci_weights"
      description: "Generate Fibonacci weights for moving average"
      cache_result: true
  variables:
    price:
      type: "dataarray"
      description: "Price data (typically close price)"
    window:
      type: "number"
      description: "Period for FWMA calculation"
      default: 21
      validation:
        min: 1
        max: 200
    asc:
      type: "boolean"
      description: "True to weight recent prices more heavily, False for older prices"
      default: true
    weights:
      type: "array"
      description: "Fibonacci weights generated using Fibonacci sequence"
      generator: "fibonacci_generator"
  functions:
    wma:
      description: "Weighted Moving Average calculation"
      args:
        - name: "data"
          type: "dataarray"
          description: "Input data"
        - name: "window"
          type: "number"
          description: "Window size"
        - name: "weights"
          type: "array"
          description: "Array of weights"
  notes: "FWMA uses Fibonacci numbers as weights. When asc=True, recent values get higher Fibonacci weights. The weights are normalized to sum to 1."

hma:
  description: "Hull Moving Average - reduces lag of moving averages by nested WMAs"
  expression: >
    wma(
      2 * wma($price, $half_length)
      - wma($price, $window),
      $sqrt_length
    )
  return_type: "dataarray"
  modules:
    half_window_generator:
      module_path: "src.data.generators.window"
      function_name: "half_window"
      description: "Compute floor(window/2) for HMA inner WMA"
      cache_result: true
    sqrt_window_generator:
      module_path: "src.data.generators.window"
      function_name: "sqrt_window"
      description: "Compute floor(sqrt(window)) for HMA outer WMA"
      cache_result: true
  variables:
    price:
      type: "dataarray"
      description: "Price data (typically close price)"
    window:
      type: "number"
      description: "Period for HMA calculation"
      default: 21
      validation:
        min: 1
        max: 200
    half_length:
      type: "number"
      description: "Half-window size = floor(window/2)"
      generator: "half_window_generator"
    sqrt_length:
      type: "number"
      description: "Sqrt-window size = floor(sqrt(window))"
      generator: "sqrt_window_generator"
  functions:
    wma:
      description: "Weighted Moving Average"
      args:
        - name: "data"
          type: "dataarray"
          description: "Input series"
        - name: "window"
          type: "number"
          description: "Window size"
        - name: "weights"
          type: "array"
          description: "Weight vector (optional)"
  notes: |
    HMA = WMA(2 * WMA(price, half_length) - WMA(price, window), sqrt_length).
    Uses nested WMAs to reduce lag while maintaining smoothness.

hwma:
  description: "Holt-Winter Moving Average - three-parameter moving average using Holt-Winters method"
  expression: "triple_exponential_smoothing($price, $na, $nb, $nc)"
  return_type: "dataarray"
  variables:
    price:
      type: "dataarray"
      description: "Price data (typically close price)"
    na:
      type: "number"
      description: "Smoothed series parameter (level smoothing)"
      default: 0.2
      validation:
        min: 0.01
        max: 0.99
    nb:
      type: "number"
      description: "Trend parameter (trend smoothing)"
      default: 0.1
      validation:
        min: 0.01
        max: 0.99
    nc:
      type: "number"
      description: "Seasonality parameter (acceleration smoothing)"
      default: 0.1
      validation:
        min: 0.01
        max: 0.99
  functions:
    triple_exponential_smoothing:
      description: "Generic triple exponential smoothing calculation"
      args:
        - name: "data"
          type: "dataarray"
          description: "Input price data"
        - name: "alpha"
          type: "number"
          description: "Level smoothing parameter (na)"
        - name: "beta"
          type: "number"
          description: "Trend smoothing parameter (nb)"
        - name: "gamma"
          type: "number"
          description: "Acceleration smoothing parameter (nc)"
  notes: |
    HWMA uses three exponential smoothing equations:
    F[i] = (1-na) * (F[i-1] + V[i-1] + 0.5*A[i-1]) + na * Price[i]
    V[i] = (1-nb) * (V[i-1] + A[i-1]) + nb * (F[i] - F[i-1])
    A[i] = (1-nc) * A[i-1] + nc * (V[i] - V[i-1])
    HWMA[i] = F[i] + V[i] + 0.5*A[i]
    
    This provides a forecast-oriented moving average that captures level, trend, and acceleration.
    HWMA is implemented using the generic triple_exponential_smoothing function with parameter mapping: na→alpha, nb→beta, nc→gamma.

triple_exponential_smoothing:
  description: "Generic Triple Exponential Smoothing (Holt-Winters method) - maintains level, trend, and acceleration"
  expression: "triple_exponential_smoothing($data, $alpha, $beta, $gamma)"
  return_type: "dataarray"
  variables:
    data:
      type: "dataarray"
      description: "Input time series data"
    alpha:
      type: "number"
      description: "Level smoothing parameter"
      default: 0.2
      validation:
        min: 0.01
        max: 0.99
    beta:
      type: "number"
      description: "Trend smoothing parameter"
      default: 0.1
      validation:
        min: 0.01
        max: 0.99
    gamma:
      type: "number"
      description: "Acceleration smoothing parameter"
      default: 0.1
      validation:
        min: 0.01
        max: 0.99
  functions:
    triple_exponential_smoothing:
      description: "Generic triple exponential smoothing calculation"
      args:
        - name: "data"
          type: "dataarray"
          description: "Input time series data"
        - name: "alpha"
          type: "number"
          description: "Level smoothing parameter (0 < α < 1)"
        - name: "beta"
          type: "number"
          description: "Trend smoothing parameter (0 < β < 1)"
        - name: "gamma"
          type: "number"
          description: "Acceleration smoothing parameter (0 < γ < 1)"
  notes: |
    Generic Holt-Winters triple exponential smoothing with three state variables:
    F[t] = (1-α) * (F[t-1] + V[t-1] + 0.5*A[t-1]) + α * X[t]  (Level)
    V[t] = (1-β) * (V[t-1] + A[t-1]) + β * (F[t] - F[t-1])     (Trend)
    A[t] = (1-γ) * A[t-1] + γ * (V[t] - V[t-1])               (Acceleration)
    Output = F[t] + V[t] + 0.5*A[t]
    
    This is the base implementation that HWMA and other variants can build upon.

kama:
  description: "Kaufman's Adaptive Moving Average - trend-following indicator that adapts to market noise"
  expression: >
    adaptive_ema(
      $price,
      (abs($price - shift($price, $length)) / rolling_sum(abs($price - shift($price, $drift)), $length) * ($fast_sc - $slow_sc) + $slow_sc)^2
    )
  return_type: "dataarray"
  variables:
    price:
      type: "dataarray"
      description: "Price data (typically close price)"
    length:
      type: "number"
      description: "Lookback period for efficiency ratio calculation"
      default: 10
      validation:
        min: 2
        max: 100
    fast:
      type: "number"
      description: "Fast EMA period for adaptive smoothing"
      default: 2
      validation:
        min: 1
        max: 50
    slow:
      type: "number"
      description: "Slow EMA period for adaptive smoothing"
      default: 30
      validation:
        min: 2
        max: 200
    drift:
      type: "number"
      description: "Period for price change calculation"
      default: 1
      validation:
        min: 1
        max: 10
    fast_sc:
      type: "number"
      description: "Fast smoothing constant: 2/(fast+1)"
      default: 0.6667  # 2/(2+1)
      validation:
        min: 0.01
        max: 1.0
    slow_sc:
      type: "number"
      description: "Slow smoothing constant: 2/(slow+1)"
      default: 0.0645  # 2/(30+1)
      validation:
        min: 0.01
        max: 1.0
  functions:
    adaptive_ema:
      description: "Adaptive exponential moving average with varying smoothing factors"
      args:
        - name: "data"
          type: "dataarray"
          description: "Input price data"
        - name: "smoothing_factors"
          type: "dataarray"
          description: "Adaptive smoothing factors for each time step"
    shift:
      description: "Shift data along time dimension"
      args:
        - name: "data"
          type: "dataarray"
          description: "Input data"
        - name: "periods"
          type: "number"
          description: "Number of periods to shift"
    rolling_sum:
      description: "Rolling sum over a window"
      args:
        - name: "data"
          type: "dataarray"
          description: "Input data"
        - name: "window"
          type: "number"
          description: "Window size"
    abs:
      description: "Absolute value"
      args:
        - name: "data"
          type: "dataarray"
          description: "Input data"
  notes: |
    KAMA adapts its smoothing based on market efficiency:
    1. Direction Movement = abs(price[t] - price[t-length])
    2. Volatility = sum(abs(price[t] - price[t-drift]) for length periods)
    3. Efficiency Ratio = Direction Movement / Volatility
    4. Adaptive Smoothing = (ER * (fast_sc - slow_sc) + slow_sc)²
    5. KAMA[t] = smoothing * price[t] + (1-smoothing) * KAMA[t-1]
    
    When efficiency is high (trending), KAMA responds faster. When efficiency is low (choppy), KAMA responds slower.
    Default fast_sc=2/3 (fast=2), slow_sc=2/31 (slow=30).

